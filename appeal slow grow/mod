use smash::hash40;
use smash::phx::Hash40;
use smash::lib::lua_const::*;
use smash::app::lua_bind::*;
use smash::app::utility::get_kind;
use smash::lua2cpp::{L2CFighterCommon, L2CFighterBase};
use smashline::*;
use smash_script::*;
use smash::app::*;



pub static mut COUNT: [i32; 8] = [0; 8];
pub static mut SCALE: [f32; 8] = [1.0; 8];

#[fighter_frame_callback]
pub fn global_fighter_frame(fighter : &mut L2CFighterCommon) {
    unsafe {
        let module_accessor = smash::app::sv_system::battle_object_module_accessor(fighter.lua_state_agent);
        let status_kind = smash::app::lua_bind::StatusModule::status_kind(fighter.module_accessor);
        let entry = WorkModule::get_int(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_INT_ENTRY_ID);
        let fighter_id = smash::app::Fighter::get_id_from_entry_id(0);
        let entry_id = entry as usize;

        let shield = smash::app::lua_bind::ShieldModule::get_attack_mul(module_accessor, *FIGHTER_SHIELD_KIND_GUARD);
        SCALE[entry_id] = 1.0 / shield;

        if sv_information::is_ready_go() == true {
            if COUNT[entry_id] == 0 {
                if ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_LW)
                || ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_HI)
                || ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_S_R)
                || ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_S_L) {
                    if ControlModule::check_button_trigger(module_accessor, *CONTROL_PAD_BUTTON_ATTACK) {
                        ShieldModule::set_attack_mul(module_accessor, 1.0 / (SCALE[entry_id] * 1.001), *FIGHTER_SHIELD_KIND_GUARD);
                        SCALE[entry_id] = SCALE[entry_id] * 1.001;
                        smash::app::sv_battle_object::fixed_scaling(fighter_id, true, *FIGHTER_SCALING_KIND_KINOKO, *FIGHTER_SCALING_TYPE_BIG, SCALE[entry_id], *FIGHTER_SCALING_STATUS_BIG);
                        COUNT[entry_id] = 1;
                    }
                }
            }
            if COUNT[entry_id] == 1 {
                if ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_LW)
                || ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_HI)
                || ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_S_R)
                || ControlModule::check_button_on(module_accessor, *CONTROL_PAD_BUTTON_APPEAL_S_L) {
                    if ControlModule::check_button_trigger(module_accessor, *CONTROL_PAD_BUTTON_ATTACK) {
                        COUNT[entry_id] = 2;
                    }
                }
            }
            if SCALE[entry_id] > 1.0
            && SCALE[entry_id] <= 200.0 {
                if COUNT[entry_id] == 1 {
                    if status_kind != *FIGHTER_STATUS_KIND_APPEAL {
                        if MotionModule::frame(fighter.module_accessor) >= 1.0 {
                            ShieldModule::set_attack_mul(module_accessor, 1.0 / (SCALE[entry_id] * 1.001), *FIGHTER_SHIELD_KIND_GUARD);
                            SCALE[entry_id] = SCALE[entry_id] * 1.001;
                            smash::app::sv_battle_object::fixed_scaling(fighter_id, true, *FIGHTER_SCALING_KIND_KINOKO, *FIGHTER_SCALING_TYPE_BIG, SCALE[entry_id], *FIGHTER_SCALING_STATUS_BIG);
                            smash::app::sv_battle_object::fixed_scaling(fighter_id, true, *FIGHTER_SCALING_KIND_KINOKO, *FIGHTER_SCALING_TYPE_BIG, SCALE[entry_id], *FIGHTER_SCALING_STATUS_BIG);
                        }
                    }
                }
                if COUNT[entry_id] == 2 {
                    if status_kind != *FIGHTER_STATUS_KIND_ENTRY {
                        if MotionModule::frame(fighter.module_accessor) >= 1.0 {
                            ShieldModule::set_attack_mul(module_accessor, 1.0 / (SCALE[entry_id] * 1.002), *FIGHTER_SHIELD_KIND_GUARD);
                            SCALE[entry_id] = SCALE[entry_id] * 1.002;
                            smash::app::sv_battle_object::fixed_scaling(fighter_id, true, *FIGHTER_SCALING_KIND_KINOKO, *FIGHTER_SCALING_TYPE_BIG, SCALE[entry_id], *FIGHTER_SCALING_STATUS_BIG);
                            smash::app::sv_battle_object::fixed_scaling(fighter_id, true, *FIGHTER_SCALING_KIND_KINOKO, *FIGHTER_SCALING_TYPE_BIG, SCALE[entry_id], *FIGHTER_SCALING_STATUS_BIG);
                        }   
                    }
                }
            }
            
        }

        if sv_information::is_ready_go() == false {
            COUNT[entry_id] = 0;
            SCALE[entry_id] = 1.0;
        }

        if SCALE[entry_id] > 1.0 {
            AttackModule::set_power_up(module_accessor, SCALE[entry_id]);
            DamageModule::set_damage_mul(module_accessor, 1.0 / SCALE[entry_id]);      
        }

    }
}

pub fn install() {
    smashline::install_agent_frame_callbacks!(
        global_fighter_frame
        //global_weapon_frame
    );
}
